[package]
name = "dandelion"
version = "0.1.1"
authors = ["Antoine \"Anthony\" SÃ©bert <antoine.sb@orange.fr>"]
edition = "2018"
publish = false
description = "Microkernel Real-Time Operating System in Rust"
documentation = "https://github.com/AntoineSebert/dandelion/documentation"
homepage = "https://github.com/AntoineSebert/dandelion"
repository = "https://github.com/AntoineSebert/dandelion"
readme = "README.md"
keywords = ["real-time", "OS", "RTOS", "microkernel"]
categories = ["embedded", "no-std"]
license = "CC-BY-NC-SA-4.0"
#doc = true
#test = true
#doctest = true
#bench = true
maintenance = { status = "experimental" }

#[doc]
#https://doc.rust-lang.org/rustdoc

# Optional specification of badges to be displayed on crates.io.
# - The badges pertaining to build status that are currently available are Appveyor, CircleCI, GitLab, and TravisCI.
# - Available badges pertaining to code test coverage are Codecov and Coveralls.
# - There are also maintenance-related badges based on isitmaintained.com which state the issue resolution time, percent of open issues, and future maintenance intentions.
#
# If a `repository` key is required, this refers to a repository in `user/repo` format.

[badges]

# Appveyor: `repository` is required. `branch` is optional; default is `master` `service` is optional; valid values are `github` (default); `id` is optional; you can specify the appveyor project id if you want to use that instead. `project_name` is optional; use when the repository name differs from the appveyor project name.
appveyor = { repository = "...", branch = "master", service = "github" }
# Travis CI: `repository` in format "<user>/<project>" is required. `branch` is optional; default is `master`
travis-ci = { repository = "...", branch = "master" }
# Circle CI: `repository` is required. `branch` is optional; default is `master`
circle-ci = { repository = "...", branch = "master" }
# Codecov: `repository` is required. `branch` is optional; default is `master` `service` is optional; valid values are `github` (default)
codecov = { repository = "...", branch = "master", service = "github" }
# Coveralls: `repository` is required. `branch` is optional; default is `master` `service` is optional; valid values are `github` (default)
coveralls = { repository = "...", branch = "master", service = "github" }

# Is it maintained resolution time: `repository` is required.
is-it-maintained-issue-resolution = { repository = "..." }
# Is it maintained percentage of open issues: `repository` is required.
is-it-maintained-open-issues = { repository = "..." }

[dependencies]
bootloader = { version = "^0.5.1", features = ["map_physical_memory"] }
volatile = "^0.2.3"
spin = "^0.4.9"
uart_16550 = "^0.1.0"
x86_64 = "^0.5.4"
pic8259_simple = "^0.1.1"
pc-keyboard = "^0.3.1"
integer-sqrt = "^0.1.2"
cmos = "^0.1.1"
array-init = "^0.0.4"
arraydeque = { version = "^0.4", default-features = false }
uluru = "^0.3.0"
either = { version = "^1.5.1", default-features = false }

[dependencies.lazy_static]
version = "^1.0"
features = ["spin_no_std"]

[dev-dependencies]
array-init = "^0.0.4"

[package.metadata.bootimage]
default-target = "x86_64-dandelion.json"